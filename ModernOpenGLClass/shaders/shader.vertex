// Version of GLSL                  
# version 330                       
// Values from code below are passed into 'zero' in the shader. You can also make it search by name and not need layout. layout() is only supported since version 3.2 
layout(location = 0) in vec3 pos;
layout(location = 1) in vec2 uv;
layout(location = 2) in vec3 color;
layout(location = 3) in vec3 normal;

// he uses 'v' to mean 'vertex'      
out vec3 vColor;
out vec2 vUv;
out vec3 vNormal;
out vec3 fragPosition;

uniform mat4 modelMatrix;            
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

void main() {
    vColor = color;
    vUv = uv;
    fragPosition = vec3(modelMatrix * vec4(pos, 1.0));

    // Normal is just a direction, it's not in relation to where the object is in the world
    // Normal needs to be transformed to model space! BUT we don't want to take into account
    // the transform. When we move the object, we don't want to move the normal, because we
    // don't want to change the way the normal is facing
    // We don't want scale either - and to remove scale, we can inverse and then tranpose it
    vNormal = mat3(transpose(inverse(modelMatrix))) * normal;

    // Example of swimming through 3d
    //vColor = vec3(modelMatrix * vec4(pos, 1.0));
    // Built in value ot the shader itself. Imagine there's an out vec4. It's built in, we can't see it. The values are calculated as the graphics pipeline goes, and this value is sent to the fragment shader. These are the final positions of the vertices on the screen. Z is how far away this thing is from us
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(pos, 1.0);
}                                    
