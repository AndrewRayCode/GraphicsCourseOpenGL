// Version of GLSL                  
# version 330
// Fragment shader only has one output usually, so we don't need to define this as special or default

out vec4 fragColor;
in vec3 vColor;
in vec2 vUv;
in vec3 vNormal;
in vec3 fragPosition;

// Directional lights, like the sun, have no origin, just an incoming direction
struct DirectionalLight {
    vec3 color;
    float ambientIntensity;
    vec3 direction;
    float diffuseIntensity;
};

struct Material {
    float specularIntensity;
    float shininess;
};

uniform sampler2D image;
uniform DirectionalLight directionalLight;
uniform Material material;

uniform vec3 eyePosition;

vec4 toGrayscale(in vec4 color) {
  float average = (color.r + color.g + color.b) / 3.0;
  return vec4(average, average, average, 1.0);
}

vec4 colorize(in vec4 grayscale, in vec4 color) {
    return (grayscale * color);
}

void main() {
    vec4 textureColor = texture(image, vUv);
    vec4 colorizedTexture = colorize(toGrayscale(textureColor), vec4(vColor, 1.0));
        
    vec4 ambientColor = vec4(directionalLight.color, 1.0) * directionalLight.ambientIntensity;
    
    // The light hitting the thing, which is relative to how overhead the light is
    // to the face. not relative to the viewer's eye.
    // This ends up being the cosine of angle between the two vectors. Discard anything below 0
    float diffuseFactor = max(dot(normalize(vNormal), normalize(directionalLight.direction)), 0.0f);
    vec4 diffuseColor = vec4(directionalLight.color, 1.0f) * directionalLight.diffuseIntensity * diffuseFactor;
    
    vec4 specularColor = vec4(0);
    // dark diffuse areas won't have specular, so ignore it
    if(diffuseFactor > 0.0f) {
        // get direction between eye and point we're hitting
        vec3 fragToEye = normalize(eyePosition - fragPosition);
        // Reflect the bouncing of our eye direction around the normal of the face.
        // First argument is what we want to reflect, second one is what we want to reflect
        // it around
        vec3 reflectedLightRay = normalize(reflect(directionalLight.direction, normalize(vNormal)));
        
        // get dot product, cosine of angle between them, value between 0 and 1
        float specularFactor = dot(fragToEye, reflectedLightRay);
        specularFactor = pow(specularFactor, material.shininess);
        specularColor = vec4(directionalLight.color * material.specularIntensity * specularFactor, 1.0f);
    }

    fragColor = colorizedTexture * (ambientColor + diffuseColor);
    fragColor = textureColor * (ambientColor + diffuseColor + specularColor);
}
