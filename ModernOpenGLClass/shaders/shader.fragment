// Version of GLSL                  
# version 330
// Fragment shader only has one output usually, so we don't need to define this as special or default

out vec4 fragColor;
in vec3 vColor;
in vec2 vUv;
in vec3 vNormal;
in vec3 fragPosition;

const int MAX_POINT_LIGHTS = 3;

struct Light {
    vec3 color;
    float ambientIntensity;
    float diffuseIntensity;
};

// Directional lights, like the sun, have no origin, just an incoming direction
struct DirectionalLight {
    Light base;
    vec3 direction;
};

struct PointLight {
    Light base;
    vec3 position;
    float constant;
    float linear;
    float exponent;
};

struct Material {
    float specularIntensity;
    float shininess;
};

uniform int pointLightCount;
uniform sampler2D image;
uniform DirectionalLight directionalLight;
uniform PointLight pointLights[MAX_POINT_LIGHTS];
uniform Material material;

uniform vec3 eyePosition;

vec4 toGrayscale(in vec4 color) {
  float average = (color.r + color.g + color.b) / 3.0;
  return vec4(average, average, average, 1.0);
}

vec4 colorize(in vec4 grayscale, in vec4 color) {
    return (grayscale * color);
}

vec4 calcLightByDirection(Light light, vec3 direction) {
    vec4 ambientColor = vec4(light.color, 1.0) * light.ambientIntensity;

    // The light hitting the thing, which is relative to how overhead the light is
    // to the face. not relative to the viewer's eye.
    // This ends up being the cosine of angle between the two vectors. Discard anything below 0
    float diffuseFactor = max(dot(normalize(vNormal), normalize(direction)), 0.0f);
    vec4 diffuseColor = vec4(light.color, 1.0f) * light.diffuseIntensity * diffuseFactor;
    
    vec4 specularColor = vec4(0);
    // dark diffuse areas won't have speculaar, so ignore it
    if(diffuseFactor > 0.0f) {
        // get direction between eye and point we're hitting
        vec3 fragToEye = normalize(eyePosition - fragPosition);
        // Reflect the bouncing of our eye direction around the normal of the face.
        // First argument is what we want to reflect, second one is what we want to reflect
        // it around
        vec3 reflectedLightRay = normalize(reflect(direction, normalize(vNormal)));
        
        // get dot product, cosine of angle between them, value between 0 and 1
        float specularFactor = dot(fragToEye, reflectedLightRay);
        specularFactor = pow(specularFactor, material.shininess);
        specularColor = vec4(light.color * material.specularIntensity * specularFactor, 1.0f);
    }
    
    return ambientColor + diffuseColor + specularColor;
}

vec4 calcDirectionalLight() {
    return calcLightByDirection(directionalLight.base, directionalLight.direction);
}

vec4 calcPointLights() {
    vec4 totalColor = vec4(0.0f);
    for(int i = 0; i < pointLightCount; i++) {
        // get direction from fragment to the light
        vec3 direction = fragPosition - pointLights[i].position;
        float distance = length(direction);
        direction = normalize(direction);

        // Calculate a normal directional light, then atenuate it
        vec4 color = calcLightByDirection(pointLights[i].base, direction);
        float attenuation = pointLights[i].exponent * distance * distance +
            pointLights[i].linear * distance +
            pointLights[i].constant;
        totalColor += color / attenuation;
    }
    return totalColor;
}

void main() {
    vec4 textureColor = texture(image, vUv);
    vec4 colorizedTexture = colorize(toGrayscale(textureColor), vec4(vColor, 1.0));

    vec4 finalColor = calcDirectionalLight();
    finalColor += calcPointLights();

    fragColor = colorizedTexture * finalColor;
    fragColor = textureColor * finalColor;
}
